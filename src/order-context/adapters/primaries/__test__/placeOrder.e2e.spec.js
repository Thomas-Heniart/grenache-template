const { describe, it, beforeAll, afterAll, expect } = require("@jest/globals");
const {
  startGrapeTestNetwork,
} = require("../../../../shared-kernel/__test__/grapeTestNetwork");
const { MongoClient, UUID } = require("mongodb");
const {
  orderContextDependencyContainer,
} = require("../../../configuration/dependencyContainer");
const {
  DeterministicIdProvider,
} = require("../../../../shared-kernel/providers/deterministicIdProvider");
const { registerPlaceOrderService } = require("../placeOrderService");

describe("E2E: Place an order", () => {
  let grapeNetwork;
  let rpcClient;
  let mongoClient;
  let service;
  let idProvider;

  beforeAll(async () => {
    grapeNetwork = await startGrapeTestNetwork();
    rpcClient = grapeNetwork.testClient();
    mongoClient = new MongoClient(process.env.MONGO_URL);
    idProvider = new DeterministicIdProvider();
    const dependencyContainer = orderContextDependencyContainer();
    dependencyContainer
      .override("mongo", mongoClient)
      .override("idProvider", idProvider);
    service = await registerPlaceOrderService({
      apiUrl: `http://127.0.0.1:${grapeNetwork.apiPorts[0]}`,
      port: 8080,
      dependencyContainer,
    });
  });

  afterAll(async () => {
    service.server.unlisten();
    service.link.stop();
    await grapeNetwork.stop();
    await mongoClient.close();
    rpcClient.stop();
  });

  it("places an order", async () => {
    const userId = "bbf7b1b1-1b1b-1b1b-1b1b-1b1b1b1b1b1b";
    const orderId = "aae7a1a1-1a1a-1a1a-1a1a-1a1a1a1a1a1a";
    idProvider.nextId = orderId;
    const orderPayload = {
      userId,
      baseSymbol: "BTC",
      quoteSymbol: "USD",
      price: 100,
      quantity: 1,
    };
    await givenBalances(userId, { USD: 200 });

    await placeOrder(orderPayload);

    await expectOrderPlaced(orderId);
    await expectBalanceOf(userId, "USD", 100);
    /*
     * - Inject a balance
     * - Place an order -> ID generated by the server -> override the ID provider
     * - Assert the order is placed
     * */
  });

  const givenBalances = async (userId, balances) => {
    const _id = new UUID(userId);
    await mongoClient
      .db("order-context")
      .collection("balances")
      .insertOne({ _id, ...balances });
  };

  const placeOrder = async (orderPayload) => {
    await rpcClient.request("order:place", orderPayload);
  };

  const expectOrderPlaced = async (orderId) => {
    const order = await mongoClient
      .db("order-context")
      .collection("orders")
      .findOne({ _id: new UUID(orderId) });
    expect(order.state).toEqual("PLACED");
  };

  const expectBalanceOf = async (userId, symbol, expectedAmount) => {
    const amount = (
      await mongoClient
        .db("order-context")
        .collection("balances")
        .findOne({ _id: new UUID(userId) })
    )[symbol];
    expect(amount).toEqual(expectedAmount);
  };
});
